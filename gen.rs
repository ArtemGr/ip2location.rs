/* automatically generated by rust-bindgen 0.71.1 */

pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::__pad5"][::std::mem::offset_of!(_IO_FILE, __pad5) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub const IP2Location_lookup_mode_IP2LOCATION_FILE_IO: IP2Location_lookup_mode = 0;
pub const IP2Location_lookup_mode_IP2LOCATION_CACHE_MEMORY: IP2Location_lookup_mode = 1;
pub const IP2Location_lookup_mode_IP2LOCATION_SHARED_MEMORY: IP2Location_lookup_mode = 2;
pub type IP2Location_lookup_mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IP2Location {
    pub file: *mut FILE,
    pub database_type: u8,
    pub database_column: u8,
    pub database_day: u8,
    pub database_month: u8,
    pub database_year: u8,
    pub product_code: u8,
    pub license_code: u8,
    pub database_count: u32,
    pub database_address: u32,
    pub ip_version: u32,
    pub ipv4_database_count: u32,
    pub ipv4_database_address: u32,
    pub ipv6_database_count: u32,
    pub ipv6_database_address: u32,
    pub ipv4_index_base_address: u32,
    pub ipv6_index_base_address: u32,
    pub database_size: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IP2Location"][::std::mem::size_of::<IP2Location>() - 56usize];
    ["Alignment of IP2Location"][::std::mem::align_of::<IP2Location>() - 8usize];
    ["Offset of field: IP2Location::file"][::std::mem::offset_of!(IP2Location, file) - 0usize];
    ["Offset of field: IP2Location::database_type"]
        [::std::mem::offset_of!(IP2Location, database_type) - 8usize];
    ["Offset of field: IP2Location::database_column"]
        [::std::mem::offset_of!(IP2Location, database_column) - 9usize];
    ["Offset of field: IP2Location::database_day"]
        [::std::mem::offset_of!(IP2Location, database_day) - 10usize];
    ["Offset of field: IP2Location::database_month"]
        [::std::mem::offset_of!(IP2Location, database_month) - 11usize];
    ["Offset of field: IP2Location::database_year"]
        [::std::mem::offset_of!(IP2Location, database_year) - 12usize];
    ["Offset of field: IP2Location::product_code"]
        [::std::mem::offset_of!(IP2Location, product_code) - 13usize];
    ["Offset of field: IP2Location::license_code"]
        [::std::mem::offset_of!(IP2Location, license_code) - 14usize];
    ["Offset of field: IP2Location::database_count"]
        [::std::mem::offset_of!(IP2Location, database_count) - 16usize];
    ["Offset of field: IP2Location::database_address"]
        [::std::mem::offset_of!(IP2Location, database_address) - 20usize];
    ["Offset of field: IP2Location::ip_version"]
        [::std::mem::offset_of!(IP2Location, ip_version) - 24usize];
    ["Offset of field: IP2Location::ipv4_database_count"]
        [::std::mem::offset_of!(IP2Location, ipv4_database_count) - 28usize];
    ["Offset of field: IP2Location::ipv4_database_address"]
        [::std::mem::offset_of!(IP2Location, ipv4_database_address) - 32usize];
    ["Offset of field: IP2Location::ipv6_database_count"]
        [::std::mem::offset_of!(IP2Location, ipv6_database_count) - 36usize];
    ["Offset of field: IP2Location::ipv6_database_address"]
        [::std::mem::offset_of!(IP2Location, ipv6_database_address) - 40usize];
    ["Offset of field: IP2Location::ipv4_index_base_address"]
        [::std::mem::offset_of!(IP2Location, ipv4_index_base_address) - 44usize];
    ["Offset of field: IP2Location::ipv6_index_base_address"]
        [::std::mem::offset_of!(IP2Location, ipv6_index_base_address) - 48usize];
    ["Offset of field: IP2Location::database_size"]
        [::std::mem::offset_of!(IP2Location, database_size) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IP2LocationRecord {
    pub country_short: *mut ::std::os::raw::c_char,
    pub country_long: *mut ::std::os::raw::c_char,
    pub region: *mut ::std::os::raw::c_char,
    pub city: *mut ::std::os::raw::c_char,
    pub isp: *mut ::std::os::raw::c_char,
    pub domain: *mut ::std::os::raw::c_char,
    pub zipcode: *mut ::std::os::raw::c_char,
    pub timezone: *mut ::std::os::raw::c_char,
    pub netspeed: *mut ::std::os::raw::c_char,
    pub iddcode: *mut ::std::os::raw::c_char,
    pub areacode: *mut ::std::os::raw::c_char,
    pub weatherstationcode: *mut ::std::os::raw::c_char,
    pub weatherstationname: *mut ::std::os::raw::c_char,
    pub mcc: *mut ::std::os::raw::c_char,
    pub mnc: *mut ::std::os::raw::c_char,
    pub mobilebrand: *mut ::std::os::raw::c_char,
    pub usagetype: *mut ::std::os::raw::c_char,
    pub latitude: f32,
    pub longitude: f32,
    pub elevation: f32,
    pub zip_code: *mut ::std::os::raw::c_char,
    pub time_zone: *mut ::std::os::raw::c_char,
    pub net_speed: *mut ::std::os::raw::c_char,
    pub idd_code: *mut ::std::os::raw::c_char,
    pub area_code: *mut ::std::os::raw::c_char,
    pub weather_station_code: *mut ::std::os::raw::c_char,
    pub weather_station_name: *mut ::std::os::raw::c_char,
    pub mobile_brand: *mut ::std::os::raw::c_char,
    pub usage_type: *mut ::std::os::raw::c_char,
    pub address_type: *mut ::std::os::raw::c_char,
    pub category: *mut ::std::os::raw::c_char,
    pub district: *mut ::std::os::raw::c_char,
    pub asn: *mut ::std::os::raw::c_char,
    pub as_: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IP2LocationRecord"][::std::mem::size_of::<IP2LocationRecord>() - 264usize];
    ["Alignment of IP2LocationRecord"][::std::mem::align_of::<IP2LocationRecord>() - 8usize];
    ["Offset of field: IP2LocationRecord::country_short"]
        [::std::mem::offset_of!(IP2LocationRecord, country_short) - 0usize];
    ["Offset of field: IP2LocationRecord::country_long"]
        [::std::mem::offset_of!(IP2LocationRecord, country_long) - 8usize];
    ["Offset of field: IP2LocationRecord::region"]
        [::std::mem::offset_of!(IP2LocationRecord, region) - 16usize];
    ["Offset of field: IP2LocationRecord::city"]
        [::std::mem::offset_of!(IP2LocationRecord, city) - 24usize];
    ["Offset of field: IP2LocationRecord::isp"]
        [::std::mem::offset_of!(IP2LocationRecord, isp) - 32usize];
    ["Offset of field: IP2LocationRecord::domain"]
        [::std::mem::offset_of!(IP2LocationRecord, domain) - 40usize];
    ["Offset of field: IP2LocationRecord::zipcode"]
        [::std::mem::offset_of!(IP2LocationRecord, zipcode) - 48usize];
    ["Offset of field: IP2LocationRecord::timezone"]
        [::std::mem::offset_of!(IP2LocationRecord, timezone) - 56usize];
    ["Offset of field: IP2LocationRecord::netspeed"]
        [::std::mem::offset_of!(IP2LocationRecord, netspeed) - 64usize];
    ["Offset of field: IP2LocationRecord::iddcode"]
        [::std::mem::offset_of!(IP2LocationRecord, iddcode) - 72usize];
    ["Offset of field: IP2LocationRecord::areacode"]
        [::std::mem::offset_of!(IP2LocationRecord, areacode) - 80usize];
    ["Offset of field: IP2LocationRecord::weatherstationcode"]
        [::std::mem::offset_of!(IP2LocationRecord, weatherstationcode) - 88usize];
    ["Offset of field: IP2LocationRecord::weatherstationname"]
        [::std::mem::offset_of!(IP2LocationRecord, weatherstationname) - 96usize];
    ["Offset of field: IP2LocationRecord::mcc"]
        [::std::mem::offset_of!(IP2LocationRecord, mcc) - 104usize];
    ["Offset of field: IP2LocationRecord::mnc"]
        [::std::mem::offset_of!(IP2LocationRecord, mnc) - 112usize];
    ["Offset of field: IP2LocationRecord::mobilebrand"]
        [::std::mem::offset_of!(IP2LocationRecord, mobilebrand) - 120usize];
    ["Offset of field: IP2LocationRecord::usagetype"]
        [::std::mem::offset_of!(IP2LocationRecord, usagetype) - 128usize];
    ["Offset of field: IP2LocationRecord::latitude"]
        [::std::mem::offset_of!(IP2LocationRecord, latitude) - 136usize];
    ["Offset of field: IP2LocationRecord::longitude"]
        [::std::mem::offset_of!(IP2LocationRecord, longitude) - 140usize];
    ["Offset of field: IP2LocationRecord::elevation"]
        [::std::mem::offset_of!(IP2LocationRecord, elevation) - 144usize];
    ["Offset of field: IP2LocationRecord::zip_code"]
        [::std::mem::offset_of!(IP2LocationRecord, zip_code) - 152usize];
    ["Offset of field: IP2LocationRecord::time_zone"]
        [::std::mem::offset_of!(IP2LocationRecord, time_zone) - 160usize];
    ["Offset of field: IP2LocationRecord::net_speed"]
        [::std::mem::offset_of!(IP2LocationRecord, net_speed) - 168usize];
    ["Offset of field: IP2LocationRecord::idd_code"]
        [::std::mem::offset_of!(IP2LocationRecord, idd_code) - 176usize];
    ["Offset of field: IP2LocationRecord::area_code"]
        [::std::mem::offset_of!(IP2LocationRecord, area_code) - 184usize];
    ["Offset of field: IP2LocationRecord::weather_station_code"]
        [::std::mem::offset_of!(IP2LocationRecord, weather_station_code) - 192usize];
    ["Offset of field: IP2LocationRecord::weather_station_name"]
        [::std::mem::offset_of!(IP2LocationRecord, weather_station_name) - 200usize];
    ["Offset of field: IP2LocationRecord::mobile_brand"]
        [::std::mem::offset_of!(IP2LocationRecord, mobile_brand) - 208usize];
    ["Offset of field: IP2LocationRecord::usage_type"]
        [::std::mem::offset_of!(IP2LocationRecord, usage_type) - 216usize];
    ["Offset of field: IP2LocationRecord::address_type"]
        [::std::mem::offset_of!(IP2LocationRecord, address_type) - 224usize];
    ["Offset of field: IP2LocationRecord::category"]
        [::std::mem::offset_of!(IP2LocationRecord, category) - 232usize];
    ["Offset of field: IP2LocationRecord::district"]
        [::std::mem::offset_of!(IP2LocationRecord, district) - 240usize];
    ["Offset of field: IP2LocationRecord::asn"]
        [::std::mem::offset_of!(IP2LocationRecord, asn) - 248usize];
    ["Offset of field: IP2LocationRecord::as_"]
        [::std::mem::offset_of!(IP2LocationRecord, as_) - 256usize];
};
unsafe extern "C" {
    pub fn IP2Location_open(bin: *mut ::std::os::raw::c_char) -> *mut IP2Location;
}
unsafe extern "C" {
    pub fn IP2Location_open_mem(
        handler: *mut IP2Location,
        arg1: IP2Location_lookup_mode,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IP2Location_close(handler: *mut IP2Location) -> u32;
}
unsafe extern "C" {
    pub fn IP2Location_get_country_short(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_country_long(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_region(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_city(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_isp(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_latitude(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_longitude(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_domain(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_zipcode(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_timezone(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_netspeed(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_iddcode(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_areacode(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_weatherstationcode(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_weatherstationname(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_mcc(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_mnc(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_mobilebrand(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_elevation(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_usagetype(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_addresstype(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_category(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_district(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_asn(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_as(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_get_all(
        handler: *mut IP2Location,
        ip: *mut ::std::os::raw::c_char,
    ) -> *mut IP2LocationRecord;
}
unsafe extern "C" {
    pub fn IP2Location_free_record(record: *mut IP2LocationRecord);
}
unsafe extern "C" {
    pub fn IP2Location_delete_shm();
}
unsafe extern "C" {
    pub fn IP2Location_api_version_num() -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn IP2Location_api_version_string() -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn IP2Location_lib_version_string() -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn IP2Location_bin_version(handler: *mut IP2Location) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in6_addr {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn IP2Location_readIPv6Address(handle: *mut FILE, position: u32) -> in6_addr;
}
unsafe extern "C" {
    pub fn IP2Location_read32(handle: *mut FILE, position: u32) -> u32;
}
unsafe extern "C" {
    pub fn IP2Location_read32_row(buffer: *mut u8, position: u32, mem_offset: u32) -> u32;
}
unsafe extern "C" {
    pub fn IP2Location_read8(handle: *mut FILE, position: u32) -> u8;
}
unsafe extern "C" {
    pub fn IP2Location_read8_row(buffer: *mut u8, position: u32, mem_offset: u32) -> u8;
}
unsafe extern "C" {
    pub fn IP2Location_readStr(handle: *mut FILE, position: u32) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn IP2Location_readFloat(handle: *mut FILE, position: u32) -> f32;
}
unsafe extern "C" {
    pub fn IP2Location_DB_set_file_io() -> i32;
}
unsafe extern "C" {
    pub fn IP2Location_DB_set_memory_cache(file: *mut FILE) -> i32;
}
unsafe extern "C" {
    pub fn IP2Location_DB_set_shared_memory(file: *mut FILE) -> i32;
}
unsafe extern "C" {
    pub fn IP2Location_DB_close(file: *mut FILE) -> i32;
}
unsafe extern "C" {
    pub fn IP2Location_DB_del_shm();
}
unsafe extern "C" {
    pub fn IP2Location_api_version_number() -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn IP2Location_clear_memory();
}
unsafe extern "C" {
    pub fn IP2Location_close_memory(file: *mut FILE) -> i32;
}
unsafe extern "C" {
    pub fn IP2Location_delete_shared_memory();
}
unsafe extern "C" {
    pub fn IP2Location_read_float(handle: *mut FILE, position: u32) -> f32;
}
unsafe extern "C" {
    pub fn IP2Location_read_float_row(buffer: *mut u8, position: u32, mem_offset: u32) -> f32;
}
unsafe extern "C" {
    pub fn IP2Location_read_ipv6_address(handle: *mut FILE, position: u32) -> in6_addr;
}
unsafe extern "C" {
    pub fn IP2Location_read128_row(buffer: *mut u8, position: u32, mem_offset: u32) -> in6_addr;
}
unsafe extern "C" {
    pub fn IP2Location_read_string(handle: *mut FILE, position: u32)
        -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn IP2Location_set_lookup_mode(
        handler: *mut IP2Location,
        arg1: IP2Location_lookup_mode,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IP2Location_set_memory_cache(file: *mut FILE) -> i32;
}
unsafe extern "C" {
    pub fn IP2Location_set_shared_memory(file: *mut FILE) -> i32;
}
